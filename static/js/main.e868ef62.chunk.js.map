{"version":3,"sources":["store/expencies.tsx","store/sort.ts","store/index.ts","components/NewExpense/NewExpense.tsx","components/CurrencyRow/CurrencyRow.tsx","components/ExpensesList/ExpensesList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["expencesReducer","expenses","action","type","expense","filter","date","map","item","goods","data","defaultSortState","field","order","sortReducer","state","getExpenses","rootReducer","combineReducers","sort","getListExpenses","createSelector","filterExpenses","sortDirection","a","b","Date","parse","split","reverse","join","persistedState","localStorage","getItem","JSON","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","setItem","stringify","getState","options","key","text","value","NewExpense","dispatch","useDispatch","useSelector","useState","setDate","amount","setAmount","product","setProduct","currency","setCurrency","handleSubmitExpence","e","preventDefault","replace","expence","id","Math","random","some","el","addExpensesByDate","onSubmit","className","onChange","target","placeholder","Dropdown","clearable","selection","onClick","CurrencyRow","currencyOptions","selectedCurrency","onChangeCurrency","total","option","ExpensesList","App","setCurrencyOptions","toCurrency","setToCurrency","currenciesRate","setCurrenciesRate","setTotal","console","log","useEffect","totalRate","reduce","acc","good","round","fetch","then","res","json","Object","keys","rates","length","firstCurrency","base","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e868ef62.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst SET_EXPENCES = 'SET_EXPENCES';\nconst ADD_EXPENSES_BY_DATE = 'ADD_EXPENSES_BY_DATE';\nconst REMOVE_EXPENCES = 'REMOVE_EXPENCES';\n\n\n\n\nexport const addExpensesByDate = (date: string, data: Good) => ({\n    type: ADD_EXPENSES_BY_DATE,\n    date,\n    data\n});\nexport const setExpence = (expense: Expencies) => ({ type: SET_EXPENCES, expense });\nexport const removeExpences = (date: string | undefined) => ({ type: REMOVE_EXPENCES, date });\n\nconst expencesReducer = (expenses: Expencies[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case SET_EXPENCES:\n            return [...expenses, action.expense];\n\n        case REMOVE_EXPENCES:\n            return expenses.filter(expense => expense.date !== action.date);\n\n        case ADD_EXPENSES_BY_DATE:\n            return expenses.map(item => {\n                if (item.date === action.date) {\n                    return {\n                        date: action.date,\n                        goods: [...item.goods, action.data],\n                    }\n                } else {\n                    return item;\n                }\n            });\n\n        default:\n            return expenses;\n    }\n}\n\nexport default expencesReducer;\n","import { AnyAction } from 'redux';\n\nconst SORT_BY = 'SORT_BY';\n\nexport const SortBy = (field: string) => ({ type: SORT_BY, field });\n\nconst defaultSortState = {\n    field: 'date',\n    order: 'ACS',\n};\n\nconst sortReducer = (state = defaultSortState, action: AnyAction) => {\n    switch (action.type) {\n        case SORT_BY:\n            if (state.field === action.field) {\n                return {\n                    ...state,\n                    order: state.order === 'ACS' ? 'DESC' : 'ACS',\n                }\n            };\n\n            return { ...state, field: action.field };\n        default:\n            return state;\n    }\n};\n\nexport default sortReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport expencesReducer from './expencies';\nimport sortReducer from './sort';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { createSelector } from 'reselect';\n\nexport const getExpenses = (state: RootState) => state.expenses;\nexport const getSorted = (state: RootState) => state.sort;\n\nconst rootReducer = combineReducers({\n    expenses: expencesReducer,\n    sort: sortReducer,\n});\n\nexport const getListExpenses = createSelector(\n    getExpenses,\n    getSorted,\n\n    (expenses: Expencies[], sort) => {\n        const filterExpenses = [...expenses];\n        const sortDirection = (sort.order === 'ACS') ? 1 : -1;\n\n        switch (sort.field) {\n            case 'date':\n                return filterExpenses\n                    .sort((a: Expencies, b: Expencies) =>\n                            // @ts-ignore\n                        (Date.parse(new Date(a.date.split(\"/\").reverse().join(\"-\"))) -\n                            // @ts-ignore\n                            Date.parse(new Date(b.date.split(\"/\").reverse().join(\"-\")))) * sortDirection\n                    );\n            default:\n                return filterExpenses;\n        }\n    }\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst persistedState = localStorage.getItem('reduxState')\n    ? JSON.parse(localStorage.getItem('reduxState') || '')\n    : {};\n\nconst store = createStore(\n    rootReducer,\n    persistedState,\n    composeWithDevTools(applyMiddleware(thunk)),\n);\n\nstore.subscribe(() => {\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});\n\nexport default store;\n","import React, { useState } from 'react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { addExpensesByDate, setExpence } from '../../store/expencies';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getExpenses } from '../../store';\n\nconst options = [\n    {key: 'USD', text: 'USD', value: 'USD'},\n    {key: 'PLN', text: 'PLN', value: 'PLN'},\n    {key: 'CAD', text: 'CAD', value: 'CAD'},\n];\n\nconst NewExpense = () => {\n    const dispatch = useDispatch();\n    const expenses = useSelector(getExpenses);\n\n    const [date, setDate] = useState<any>(new Date());\n    const [amount, setAmount] = useState('');\n    const [product, setProduct] = useState('');\n    const [currency, setCurrency] = useState('');\n\n    let changeId = () => (Math.random() + 1);\n\n    const handleChangeInputDate = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setDate(e.target.value);\n    };\n\n    const handleChangeInputAmount = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setAmount(e.target.value);\n    };\n\n    const handleChangeProductInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProduct(e.target.value)\n    };\n\n    const handleDropdownCurrency = (e: any, data: any) => {\n        e.preventDefault();\n        setCurrency(data.value);\n    }\n\n    const handleSubmitExpence = (\n        e: React.FormEvent<HTMLFormElement>\n            | React.MouseEvent<HTMLButtonElement>\n    ) => {\n        e.preventDefault();\n\n        if (date !== ''\n            && (amount !== null || amount !== \"\")\n            && currency !== ''\n            && product.replace(/\\s/g, '') !== '') {\n            const expence: Expencies = {\n                id: changeId(),\n                goods:\n                    [{\n                    amount: +amount,\n                    currency: currency,\n                    product: product\n                }],\n                date: date,\n            };\n\n            if (expenses.some(el => el.date === date)) {\n                dispatch(addExpensesByDate(date, expence.goods[0]));\n            } else {\n                dispatch(setExpence(expence))\n            };\n\n            setDate('');\n            setAmount('');\n            setCurrency('');\n            setProduct('');\n        }\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmitExpence}>\n                <input\n                    type=\"date\"\n                    className=\"NewExpense__input\"\n                    value={date}\n                    onChange={handleChangeInputDate}\n                />\n                <input\n                    type=\"number\"\n                    className=\"NewExpense__input\"\n                    placeholder=\"add amount\"\n                    value={amount}\n                    onChange={handleChangeInputAmount}\n                />\n                <Dropdown\n                    clearable\n                    options={options}\n                    selection\n                    value={currency}\n                    placeholder=\"Choose\"\n                    onChange={handleDropdownCurrency}\n                />\n                <input\n                    type=\"text\"\n                    className=\"NewExpense__input\"\n                    placeholder=\"add product\"\n                    value={product}\n                    onChange={handleChangeProductInput}\n                />\n                <button\n                    type=\"submit\"\n                    className=\"NewExpense__button button\"\n                    onClick={handleSubmitExpence}\n                >Add\n                </button>\n            </form>\n        </>\n    );\n};\n\nexport default NewExpense;\n","import React from 'react';\n\ntype CurrencyRowProps = {\n    currencyOptions: string[],\n    selectedCurrency: [],\n    onChangeCurrency: (e: React.ChangeEvent<HTMLSelectElement>) => void,\n    total: number,\n}\n\nexport const CurrencyRow: React.FC<CurrencyRowProps> = ({\n  currencyOptions,\n  selectedCurrency,\n  onChangeCurrency,\n  total\n}) => {\n\n    return (\n        <div className=\"CurrencyRow\">\n            <div className=\"CurrencyRow__row\">\n                <p className=\"CurrencyRow__text-total\">total: {total}</p>\n                <select\n                    value={selectedCurrency}\n                    onChange={onChangeCurrency}\n                    className=\"CurrencyRow__select\"\n                >\n                    {currencyOptions.map(option => (\n                        <option key={option} value={option}>{option}</option>\n                    ))}\n                </select>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getListExpenses } from '../../store';\nimport { removeExpences} from '../../store/expencies';\n\nexport const ExpensesList = () => {\n    const dispatch = useDispatch();\n    const expenses = useSelector(getListExpenses);\n\n    return (\n        <>\n            {expenses.map((expence: Expencies) => (\n            <div key={expence.id} className=\"NewExpense__list\">\n                <p className=\"NewExpense__date\"><span className=\"NewExpense__date-text\">{expence.date}</span></p>\n                {expence.goods.map(item => (\n                    <div key={item.product} className=\"NewExpense__paragraphs\">\n                        <p className=\"NewExpense__item\">{item.product}</p>\n                        <p className=\"NewExpense__item\">{item.amount}\n                        <span className=\"NewExpense__currency\">{item.currency}</span>\n                    </p>\n                    </div>\n                ))}\n                <button\n                    type=\"button\"\n                    className=\"NewExpense__button-item\"\n                    onClick={() => dispatch(removeExpences(expence.date))}\n                >Clear</button>\n            </div>\n        ))}\n        </>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport NewExpense from './components/NewExpense/NewExpense';\nimport { CurrencyRow } from './components/CurrencyRow/CurrencyRow';\nimport { getListExpenses } from './store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ExpensesList } from './components/ExpensesList/ExpensesList';\nimport { SortBy } from './store/sort';\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest';\n\nfunction App() {\n    const expenses = useSelector(getListExpenses);\n    const dispatch = useDispatch();\n    const [currencyOptions, setCurrencyOptions] = useState<string[]>([]);\n    const [toCurrency, setToCurrency] = useState();\n    const [currenciesRate, setCurrenciesRate] = useState();\n    const [total, setTotal] = useState(0);\n    console.log(currencyOptions, toCurrency, currenciesRate)\n\n    useEffect(() => {\n        if (toCurrency != null && currenciesRate != null) {\n            const rate = expenses\n                .map(item => item.goods\n                    .reduce((acc: number, good: Good) => {\n                         return acc + (good.amount / currenciesRate[good.currency]);\n                    }, 0) * currenciesRate[toCurrency]);\n            const totalRate = rate.reduce((acc, currency) => acc + currency, 0)\n            setTotal(Math.round(totalRate));\n        }\n    }, [toCurrency, currenciesRate, expenses]);\n\n    useEffect(() => {\n        fetch(BASE_URL)\n            .then(res => res.json())\n            .then(data => {\n                if (typeof Object.keys(data.rates) !== 'undefined' && Object.keys(data.rates).length > 0) {\n                    const firstCurrency = Object.keys(data.rates)[0];\n                    setToCurrency(firstCurrency);\n                    setCurrencyOptions([...Object.keys(data.rates)]);\n                    setCurrenciesRate(data.rates);\n                    return console.log(data.base, data.rates)\n                }\n            })\n    }, []);\n\n    const handlerChange = (e: React.ChangeEvent<HTMLSelectElement>) => (\n        setToCurrency(e.target.value)\n    );\n\n  return (\n    <div className=\"App\">\n        <header className=\"App__header\">\n            <h1 className=\"App__head\">Expenses</h1>\n            <NewExpense />\n        </header>\n        <div className=\"App__list\">\n            <button\n                className=\"NewExpense__button-list button\"\n                onClick={() => dispatch(SortBy('date'))}\n            >\n                list\n            </button>\n            <ExpensesList />\n        </div>\n            <CurrencyRow\n                currencyOptions={currencyOptions}\n                selectedCurrency={toCurrency}\n                onChangeCurrency={handlerChange}\n                total={total}\n            />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom'\nimport store from './store';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}